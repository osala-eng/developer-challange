#!/bin/bash
# Contains support functions

# Dev null
NULL="/dev/null"
UPDATE=0
showdown="/home/ubuntu/showdown-2.1.0/bin/showdown.js"

# Install nodejs
install_nodes_js() {
	local address="https://nodejs.org/dist/v18.14.1/node-v18.14.1-linux-x64.tar.xz"
	wget "$address" -P "/tmp/"
	tar -xf "/tmp/node-v18.14.1-linux-x64.tar.xz" -C "/opt/"
	echo -e "#!/usr/bin/bash" >"/etc/profile.d/node.sh"
	echo -e 'export PATH="/opt/node-v18.14.1-linux-x64/bin:${PATH}"' >>"/etc/profile.d/node.sh"
	chmod a+x "/etc/profile.d/node.sh"
	source "/etc/profile.d/node.sh"
}

# Test empty dir
dir_is_empty() {
	test -e "$1/"* 2>/dev/null
	case $? in
	1) return 1 ;;
	*) return 0 ;;
	esac
}

# Run apt update
run_update() {
	[[ $((UPDATE)) -eq 1 ]] && return
	apt-get update -y
	UPDATE=1
}

# Local install configuration
local_install_config() {
	case $1 in
	"node") install_nodes_js ;;
	*) apt-get install $1 -y ;;
	esac
}

# Check if a programme is available
check_program() {
	for i in $@; do
		if ! command -v "$i" &>"$NULL"; then
			[[ $((UPDATE)) -eq 0 ]] && run_update
			local_install_config $i
		fi
	done
}

# Gets filename without extension from path
get_filename() {
	local temp="${1%.*}"
	filename="${temp##*/}"
}

get_filepath() {
	local indir="$2"
	local outdir="$3"
	local temp="${1%/*}"
	filepath=$(echo $temp | sed "s|$indir|$outdir|")
}

# Convert markdown to HTML
convert_to_html() {
	local indir="$1"
	local outdir="$2"

	for line in $(find "$indir"/* -type f); do
		get_filename "$line"
		get_filepath "$line" "$indir" "$outdir"
		showdown makehtml -i "$line" -o "${filepath}/${filename}.html"
		#markdown <"$line" >"${outdir}/${filename}.html"
	done
}

# Cleanup function
Cleanup() {
	for i in $@; do
		rm -rf "$i"
	done
}

# Nodejs Setup path and installs
node_js_setup() {
	export NODE_PATH="$(npm list -g | head -1)/node_modules"
	for module in $@; do
		echo -e "Checking for $module globally"
		if npm list -g | grep -q "$module"; then
			echo -e "$module found"
			continue
		else
			echo -e "$module not found Running npm install"
			npm install -g "$module"
		fi
	done
}

# Shebang install templates with the right bin bath
shebang_js() {
	local node_bin="#!$(which node)"
	for filename in $@; do
		sed -i "1s|^.*$|$node_bin|" "$filename"
	done
}

# Prints a line and appends an empty line at the end
print_line() {
	echo -e "$1"
	echo -e
}

# Remove metadata from files
remove_meta() {
	for filename in $(find "$1"/* -type f); do
		sed -i '/---/,/---/d' "$filename"
	done
}

# Run css build
run_sassy_css() {
	sass "$1" "$2"
}

# Create all output paths
create_all_build_paths() {
	local indir="$1"
	local outdir="$2"
	for line in $(find "$indir"/* -type d); do
		local filepath=$(echo "$line" | sed "s|$indir|$outdir|")
		mkdir -p "$filepath"
	done
}

handle_input_is_file() {
	echo -e "File provided as an input, proceeding to generate a single page site"
	INDIR=".tmp/tempin"
	mkdir -p "$INDIR"
	cp "$1" "$INDIR"
}

handle_input_is_string() {
	echo -e "String provided as an input, proceeding to generate a single page site"
	INDIR=".tmp/tempin"
	mkdir -p "$INDIR"
	echo -e $1 >"$INDIR"/index.md
}

create_git_work_flow() {
	local workflowlib="/opt/staticgen/lib/gitworkflow/staticgen.yml"
	local gitworkflowdir="$(git rev-parse --show-toplevel)/.github/workflows"
	mkdir -p "$gitworkflowdir"
	cp "$workflowlib" "$gitworkflowdir/staticgen.yml"
}

set_project_title() {
	local title="$2"
	if [ -z "$title" ]; then
		title="Staticgen"
	fi
	sed -i "s/{{ project-title }}/$title/g" $1
}
